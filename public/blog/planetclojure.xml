<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sparrows.dev</title>
  <link href="blog/atom.xml" rel="self"/>
  <link href="blog/"/>
  <updated>2023-08-10T22:48:42+00:00</updated>
  <id>blog/</id>
  <author>
    <name>Quick Blogger</name>
  </author>
  <entry>
    <id>blog/anouncing-scurvy.html</id>
    <link href="blog/anouncing-scurvy.html"/>
    <title>Anouncing Scurvy</title>
    <updated>2021-05-14T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I made a character generator for Knave, availible <a href='https://unwarysage.github.io/scurvy'>here!</a></p><h1>...Knave?</h1><p>Recently, I've been on something of an Old School Renaissance RPG kick. I've always enjoyed reading OSR blogs, the sheer variety and depth of original ideas in them is staggering. However, something tipped over, and I finally started looking for the rules that people use to run OSR games. Considering the homebrewing tradition that is extremely prevalent in the OSR community, that's a little strange a quest at times.</p><p>However, I followed a trail of recommendations and found <a href='https://www.drivethrurpg.com/product/250888/Knave'>Knave</a>. I was struck by the simplicity and concision of the rules. I found <a href='https://dungeonsandpossums.com/2020/04/some-great-knave-rpg-resources/'>a collection</a> of tools for Knave, and it included several character generators, which tickled my fancy.</p><h1>The Idea</h1><p>I noticed, reading over the code for <a href='https://lawbreaker.herokuapp.com/'>Lawbreaker</a>, and thought... Why does this need a backend? Storing the random seed in the URL would allow bookmarking and sharing characters as small links.</p><p>This seemed an ideal project, small enough I wouldn't get caught in scope-creep, and with a designated walk-away point, as adding additional features to the generator section post-launch would invalidate already built characters, unless done extremely carefully.</p><p>I turned it over in my head for a day or so, and decided to enact the idea.</p><h1>The Tools</h1><p>I wanted to use <a href='https://tailwindcss.com/'>Bulma</a>. It was familiar to me, and I knew I could be effective quickly with it. If I wished, I could later rewrite the UI in <a href='https://tailwindcss.com/'>tailwind-css</a> as a learning exercise, but for now, I wanted momentum.</p><p>Similarly, as the site I was envisioning had only one button, re-frame was definitely overkill. I looked at rum, but decided instead to use the already familiar library reagent that underpins re-frame.</p><p>I initially used deps.edn as my dependency system, and really enjoyed the low-hassle configuration. However, as I neared release, the paucity of documentation on using <code>:advanced</code> compilation mode with <a href='https://clojurescript.org/guides/webpack'>deps.edn</a> came to bite me.</p><p><a href='https://shadow-cljs.github.io/docs/UsersGuide.html'>shadow-cljs</a> however, was an near drop-in replacement, and very well-documented on top. The switch only took about half an hour, including the time to set up the optimizing build.</p><h1>The Code</h1><p>Moving quickly, I established three namespaces.</p><ul><li><code>scurvy.page</code>, which would handle all the html, state, and so on. The plumbing of the app.</li><li><code>scurvy.tables</code>, which was a namespace and not an <code>.edn</code> file to allow for programmatic generation of the item details. Saved a lot of typing.</li><li><code>scurvy.character</code>, which would do the actual number crunching and assembly, drawing from <code>scurvy.tables</code>.</li></ul><p>I made some simple display components that would just dump the character map data to the screen, and simultaneously worked on building up the generator, and the views to display what had been generated. Back and forth, in very rapid iterations.</p><p>With some quick regex work in a function called <code>copy-parse</code>, I could extract the tables from the pdf very quickly, and so that barely slowed me, despite the size of the namespace.</p><p>Once the generator was more or less working, and the display was nearly done, I took a pass through the Knave booklet and made sure that everything matched the 'on paper' rules. I caught a few bugs, such as unarmored characters having +1 to their armor defense.</p><p>Finally, I looked around for some programmable random number generators that would work in ClojureScript. <a href='https://github.com/ashenfad/cljx-sampling'>cljx-sampling</a> fit the bill perfectly, and as I'd made sure all of the functions in <code>scurvy.character</code> used a single <code>roll-die</code> function, I just needed to create a new namespace, <code>scurvy.random</code> setup the groundwork for seedable random numbers, and refactor the create-character function to optionally take a seed and set the PRNG from it before generating.</p><p>This could probably be improved with a macro, something like <code>with-open</code>, but for the PRNG.</p><p>Some more work in <code>scurvy.page</code> and some research in the Javascript API the ClojureScript can access, and I could load and set the seed in the URL.</p><p>I added the name database that Lawbreaker pulled from, and did some polish work, such as notifications of unusual builds, and Scurvy was ready.</p><p>I switched to shadow-cljs, and built an optimized version. Once that was done, I adapted this blog's build script to handle the Clojure and ClojureScript dependencies, added caching because the amount of dependencies pulled in for ClojureScript compilation was rather high, and Scurvy was out and in the wild.</p><h1>Retrospective</h1><p>I had set out to fully finish something, and made choices to reflect that. I was frankly overwhelmed by how fast this made me. Scurvy was built, from first file to published, in under two days. Less than a full workday, if it had been the only thing I worked on. I'm <em>extremely</em> happy with the momentum I kept.</p><p>Things I could definitely improve would include:</p><ul><li>Accessibility. I need to read more deeply about this, but I consider it to be a glaring omission. Once I know more, I will be returning to fix its absence.</li><li>Re-do the CSS, rolling my own for more control and learning. Consider using purge-css or bulma's own "require what you need only" tools to cut down the page size even more.</li><li>Add a printable version button, and/or one that exports to a copy pastable text format for ease.</li><li>Make sure that Scurvy writes to the browser history, so that you can use the browser back button to re-find that amazing character.</li></ul><p>I hope that <a href='https://unwarysage.github.io/scurvy/'>Scurvy</a> serves you well!</p>]]></content>
  </entry>
  <entry>
    <id>blog/blog-the-second.html</id>
    <link href="blog/blog-the-second.html"/>
    <title>Blog The Second: Moving to Cryogen on Github Pages</title>
    <updated>2021-02-17T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<h2>Reignition</h2><p>I hadn't touched this blog in a long time, but needing some projects to keep my skills up, I've decided to resurrect it. However, I didn't want to go back to the standard GitHub Pages Jekyll workflow. I found my relative inability to tinker constraining, as I didn't know the underlying language, namely Ruby. Jekyll is a fine project, but I'm principally a Clojure dev, and I want to feel like I own my blog, and that means the code that powers it.</p><!-- end-of-preview --><h2>Enter Cryogen</h2><p>Looking through the static site generators for Clojure, <a href='http://cryogenweb.org/'>Cryogen</a> and <a href='https://perun.io'>Perun</a> seemed to be the major players for simple sites. I'd gotten my feet wet with simple projects in both, but never published anything. I like the idea of perun, but its lack of maintainership and needing to learn boot to fully work it, plus incomplete documentation made the decision for me.</p><p>When I started in Jekyll, I noted that it should be easy enough to transfer the blog over to a different system. It's just Markdown after all. I was both right and wrong, and thought writing up a post on how I did the transfer would be good notes for myself in future, and of interest to anyone else seeking to leave Jekyll, or run Cryogen through GitHub Pages.</p><h3>01: Setting Up Cryogen</h3><p>I ran the usual <code>lein new cryogen unwarysage.github.io</code> and started tinkering with the config, following Cryogens documentation. Picked out a theme for the moment, tried <code>:previews</code> on and off, and made <code>:posts-output</code> simply <code>:posts</code>, but by and large I ran with the defaults.</p><h3>02: Migration from Jekyll</h3><p>Copying over the markdown files into a transitional folder, I went through and converted them by hand, needing only to do eight or so pages. I could have scripted any of these steps, but it wasn't worth it for eight repititions.</p><p>First I converted the YAML frontmatter into the Clojure map literal expected by Cryogen. I dropped the date entry, as I don't think I need super precise timestamps, and I'm already dating based on the filename. Other than changing <code>categories</code> to <code>:tags</code>, that was all I needed to make the blog compile.</p><p>For example, going from this.<pre><code class="lang-yml">---
layout: post
title: Terrayiel, Factions and Power
date:   2018-09-05 15:08:55 -0500
categories: rpg worldbuilding fantasy terrayiel
---
</code></pre></p><p>to this.<pre><code class="lang-clojure">{:layout :post
:title &quot;Terrayiel, Factions and Power&quot;
:tags &#91;&quot;rpg&quot; &quot;worldbuilding&quot; &quot;fantasy&quot; &quot;terrayiel&quot;&#93;}
</code></pre></p><p>Following that, I needed to make the links work. Cryogen provides a stricter separation of Markdown and template, so I didn't have to deal with templating logic, just ordinary markdown links, which is a nice change.</p><p>For example, Jekyll has this, <code>&#91;Previous: Souls and Magic&#93;&#40;{{site.baseurl }}{% post&#95;url 2018-08-22-terrayiel-souls-and-magic %}&#41;</code></p><p>versus Cryogens version here. <code>&#91;Previous: Souls and Magic&#93;&#40;/posts/2018-08-22-terrayiel-souls-and-magic&#41;</code></p><p>Not caring for my history with Jekyll, I simply set my local git repositories upstream to point at GitHub with <code>git remote add origin https://github.com/unwarysage/unwarysage.github.io</code>, and then force-pushed. This killed the prior blog, but kept the repository and it's settings.</p><h3>03: Wiring up GitHub Actions</h3><p>I read a chunk of the GitHub Pages and Actions documentation, but this next bit took some fumbling, which I will summarize the overrall result, and not delve into the blow-by-blow.</p><ol><li>Create <code>.nojekyll</code> in the repository root. this tells Github to stop thinking this is a Jekyll project.</li><li>Ensure that your <code>:blog-prefix</code> in Cryogens <code>config.edn</code> is set to the empty string. This is so that you could run a Cryogen blog alongside something else and not have the URI clash, but GitHub Pages expect to be flat, with no prefixing.</li><li>Create <code>.github/workflows/publish.yml</code>. If you are using Cryogen, you can just use mine, but you'll need some tweaking otherwise.</li><li>next, go to your repository on GitHub, and under Settings, enable github pages, set to the root of <code>gh-pages</code> branch.</li><li>Push your changes to <code>master</code> and watch the Action run on Github, then go to <code>https://your-github-username-here.github.io</code> and bask in the glory.</li></ol><h4>The GitHub Action in detail</h4><pre><code class="lang-yml"># .github/workflows/publish.yml
name: publish

on:
  push:
    branches:
    - master
  workflow&#95;dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # checks out a copy of the repository on the runners machine
      - name: Checkout repository
        uses: actions/checkout@master
    # Install Java
      - name: Prepare Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
    # Setup leiningen
      - name: Setup Leiningen
        uses: DeLaGuardo/setup-clojure@master
        with:
          lein: 2.9.1
    # Setup NPM
      - name: Setup NPM
        run: sudo apt install nodejs -y &amp; nodejs -v &amp; sudo apt install npm &amp; npm -v
    # Setup Sass
      - name: Setup Sass
        run: sudo npm install sass -g
    # Fetch Lein Deps
      - name: Fetch deps
        run: lein deps
    # cache Clojure&#40;java&#41; dependencies
      - name: Cache Java modules
        uses: actions/cache@v2
        env:
          cache-name: cache-java-modules
        with:
          # npm cache files are stored in `&#126;/.m2` on Linux/macOS
          path: &#126;/.m2
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles&#40;'&#42;&#42;/package-lock.json'&#41; }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
    # Build the blog    
      - name: Build Blog
        run: lein run
    # Deploy to GH-pages
      - name: Deploy Blog
        uses: peaceiris/actions-gh-pages@v3
        with: 
          github&#95;token: ${{ secrets.GITHUB&#95;TOKEN }}
          publish&#95;dir: ./public/
</code></pre><p>This tells GitHub to run this everytime <code>master</code> is pushed to, or by manual request. The action will checkout the repository on the runner, install java, install <code>lein</code> (and Clojure), run <code>apt</code> to  get <code>nodejs</code> and <code>npm</code>, then uses <code>npm</code> to install the <code>sass</code> command. Whatever you do to provide Sass, it needs to be reachable at the path specified in <code>:sass-path</code> in <code>config.edn</code>. It will then ask <code>lein</code> to pull in it's dependencies, and build the blog. Then it will cache the leiningen dependencies, for faster rebuilds. This needs to come after the step where the dependencies are pulled in, so that the initial cache is a populated folder. Cryogen puts the built blog in <code>/public/</code>. Finally, the workflow uses another preconfigured action to move the files from there to the <code>gh-pages</code> branch, creating it if neccesary.</p><h2>Conclusion</h2><p>It's the little details in Software, and getting them exactly right. Deploying to GitHub Pages just makes the feedback loop clunkier, requiring a full commit and push to test, despite wanting to only push good code. However, I do think the project is working quite well. I'm blogging once more, and excited to start tweaking this site to no end, especially now I have reduced the amount of black-box code to just be GitHub Pages deployment system. It's a good feeling.</p><p>Edits: Added information on caching, fixed typoes.</p>]]></content>
  </entry>
</feed>
